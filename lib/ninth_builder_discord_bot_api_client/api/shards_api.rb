=begin
#Discord Bot Cluster API

#API documentation for the Discord Bot Cluster management system

The version of the OpenAPI document: 1.0.1
Contact: contact@example.com
Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module NinthBuilderDiscordBotAPIClient
  class ShardsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get shard information
    # Retrieve information about all shards including status and statistics
    # @param [Hash] opts the optional parameters
    # @return [GetShardsResponse]
    def shards_get(opts = {})
      data, _status_code, _headers = shards_get_with_http_info(opts)
      data
    end

    # Get shard information
    # Retrieve information about all shards including status and statistics
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetShardsResponse, Integer, Hash)>] GetShardsResponse data, response status code and response headers
    def shards_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShardsApi.shards_get ...'
      end
      # resource path
      local_var_path = '/shards'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetShardsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ShardsApi.shards_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShardsApi#shards_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set shard presences
    # Update the presence/activity status of all shards
    # @param set_shard_presences_request [SetShardPresencesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def shards_presence_put(set_shard_presences_request, opts = {})
      shards_presence_put_with_http_info(set_shard_presences_request, opts)
      nil
    end

    # Set shard presences
    # Update the presence/activity status of all shards
    # @param set_shard_presences_request [SetShardPresencesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def shards_presence_put_with_http_info(set_shard_presences_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ShardsApi.shards_presence_put ...'
      end
      # verify the required parameter 'set_shard_presences_request' is set
      if @api_client.config.client_side_validation && set_shard_presences_request.nil?
        fail ArgumentError, "Missing the required parameter 'set_shard_presences_request' when calling ShardsApi.shards_presence_put"
      end
      # resource path
      local_var_path = '/shards/presence'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(set_shard_presences_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ShardsApi.shards_presence_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShardsApi#shards_presence_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
